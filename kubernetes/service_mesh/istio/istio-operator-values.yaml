# 配置文件对应的 istioctl 版本：1.8.x
# 本地开发测试集群部署 istio，需要用到的自定义配置
# 这份配置的官方文档：https://istio.io/latest/docs/reference/config/istio.operator.v1alpha1/
apiVersion: install.istio.io/v1alpha1
kind: IstioOperator
spec:
  # profile=default 是官方推荐的用于生产环境部署。它只部署 istiod/ingressgateway
  # 从 istio 1.7 开始，第三方组件如 prometheus/grafana/jaeger(tracing)/kiali 都需要自行安装，istio 不再提供默认组件。建议使用 operator/helm 进行安装
  profile: default
  hub: image-registry.svc.local/istio # 使用私有 dockerhub 镜像仓库
  # meshConfig 的所有参数：https://istio.io/latest/docs/reference/config/istio.mesh.v1alpha1/#MeshConfig
  meshConfig:
    # 改为 `/dev/stdout` 可将 access log 输出到容器日志中。但是注意，access log 会非常多，可能影响性能！
    # 另外注意不要把日志输出到根文件系统中（如 /tmp/accesslog），因为 sidecar 的根文件系统是只读的！
    accessLogFile: ""  # 不收集 access log。
    accessLogEncoding: TEXT  # 日志格式，默认为 JSON
    enableEnvoyAccessLogService: false  # 启动 Envoy 的 ALS **服务**，暂时不清楚其含义。不开启也能收集 access log

    # 启用 prometheus 集成，istio 将在数据层注入 prometheus 相关注解
    # prometheus 注解只适用于 prometheus 社区的 helm chart，而 prometheus-operator 只支持 ServiceMonitor 等 CRDs！
    enablePrometheusMerge: true
    enableTracing: true  # 启用链路追踪
    enableAutoMtls: true # 启用自动双向认证
    outboundTrafficPolicy:
      mode: ALLOW_ANY # 允许任意流量出网。改为 REGISTRY_ONLY 将只允许访问已注册的域名。
  components:
    pilot:
      k8s:
        # 启用实验性功能：记录 mysql/redis 的指标(metrics)
        #（mysql/redis 流量不基于 http，加不了 trace headers，我们的应用只能主动上报这类 trace 信息）
        env:
          - name: PILOT_ENABLE_MYSQL_FILTER
            value: "true"
          - name: PILOT_ENABLE_REDIS_FILTER
            value: "true"
        resources:
          requests:
            cpu: 1000m # override from default 500m
            memory: 4096Mi # ... default 2048Mi
        hpaSpec:
          maxReplicas: 3 # ... default 5
          minReplicas: 2 # ... default 1
    ingressGateways:
      - name: istio-ingressgateway
        enabled: true
        k8s:
          resources:
            requests:
              cpu: 1000m
              memory: 1024Mi
            limits: # 实测发现这东西还挺吃资源的
              cpu: 2000m
              memory: 2048Mi
          hpaSpec:
            maxReplicas: 5 # ... default 5
            minReplicas: 2 # ... default 1
          service: # 测试集群需通过 NodePort 导出 ingressgateway
            ports:
              - name: status-port
                port: 15021
                targetPort: 15021
              - name: http2
                port: 80
                nodePort: 80
                targetPort: 8080
              - name: https
                port: 443
                # nodePort: 443
                targetPort: 8443
              - name: tcp
                port: 31400
                targetPort: 31400
              - name: tls
                port: 15443
                targetPort: 15443
    egressGateways:
      - name: istio-egressgateway
        enabled: true
        k8s:
          resources:
            limits:
              cpu: 2000m
              memory: 1024Mi
            requests:
              cpu: 10m
              memory: 40Mi
          hpaSpec:
            maxReplicas: 5 # ... default 5
            minReplicas: 2 # ... default 1
  values:
    global: # 全局配置
      defaultNodeSelector:
        network: "true" # 使用网络组件专用节点
      jwtPolicy: first-party-jwt # 不使用第三方 jwt 验证。
      logAsJson: false  # 日志使用 json 格式
      logging:  # 日志级别
        level: default:info
      proxy:
        logLevel: info # sidecar(envoy) 的日志级别
        tracer: zipkin
        # 1.7.0+ 让主容器在 istio-proxy 就绪后，再启动。避免主容器因为网络未就绪而 Crash.
        holdApplicationUntilProxyStarts: true
      tracer:
        # 不使用 istio 自带的 jaeger，改用 Jaeger Operator 部署（或者测试环境可以使用集群外部的 jaeger）
        zipkin: # 目前 istio 只支持 zipkin 的协议格式（x-b3-xxx 请求头），不支持 w3c trace-context 标准
          address: "<jaeger-service>.<jager-space>:9411" # 应该也可以使用外部的 jaeger
    pilot:
      traceSampling: 0.1 # 链路追踪的采样率
    gateways:
      istio-ingressgateway:
        type: NodePort # 本地测试集群用不了 LoadBalancer
        autoscaleEnabled: true
      istio-egressgateway: # 出网流量管控
        autoscaleEnabled: true
    telemetry:
      enabled: true
      v2:
        enabled: true
        metadataExchange:
          wasmEnabled: false
        prometheus:
          # 干啥用的？不清楚...
          enabled: true
          wasmEnabled: false

