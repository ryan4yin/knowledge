---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: home-cache-pvc
  labels:
    app: build-image
spec:
  storageClassName: rook-ceph-block
  accessModes:
    # 所有的构建任务共用此 PVC
    - ReadWriteMany
  resources:
    requests:
      storage: 20Gi
---
# 使用 Buildkit 构建容器镜像
#
# USAGE:
#
# push 镜像需要一个 config.json, 这个 json 需要被挂载到 `$DOCKER_CONFIG/config.json`.
# 为此，你首先需要构建 config.json 文件，并使用它创建一个 kubernetes secret:
#
#    export DOCKER_REGISTRY="registry.svc.local"
#    export DOCKER_USERNAME=<username>
#    export DOCKER_TOKEN='<password>'   # 对于 harbor 仓库而言，token 就是账号的 password.
#    kubectl create secret generic docker-config --from-literal="config.json={\"auths\": {\"$DOCKER_REGISTRY\": {\"auth\": \"$(echo -n $DOCKER_USERNAME:$DOCKER_TOKEN|base64)\"}}}"
#
# clone git 仓库也需要 git credentails，这可以通过如下命令创建：
# 
#    kubectl create secret generic private-git-creds --from-literal=username=<username> --from-file=ssh-private-key=<filename>
# 
# REFERENCES:
#
# * https://github.com/argoproj/argo/blob/master/examples/buildkit-template.yaml
# * https://github.com/moby/buildkit#expose-buildkit-as-a-tcp-service
# * https://blog.alexellis.io/building-containers-without-docker/
# * https://hub.docker.com/r/moby/buildkit
#
apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: build-image
spec:
  volumes:
    - name: docker-config
      secret:
        secretName: docker-config
    - name: home-cache
      persistentVolumeClaim:
        claimName: home-cache-pvc
  arguments:
    parameters:
      - name: repo  # 源码仓库
        value: git@gitlab.svc.local:ryan4yin/my-app.git
      - name: branch
        value: main
      - name: context-path
        value: .
      - name: dockerfile
        value: Dockerfile
      - name: image  # 构建出的镜像名称
        value: registry.svc.local/ryan4yin/my-app:latest
  entrypoint: main
  templates:
    - name: main
      steps:
      - - name: build-image
          template: build-image
          arguments:
            artifacts:
              - name: git-repo
                git:
                  repo: "{{workflow.parameters.repo}}"
                  revision: "{{workflow.parameters.branch}}"
                  insecureIgnoreHostKey: true
                  usernameSecret:
                    name: private-git-creds
                    key: username
                  sshPrivateKeySecret:
                    name: private-git-creds
                    key: ssh-private-key
            parameters:
              - name: context-path
                value: "{{workflow.parameters.context-path}}"
              - name: dockerfile
                value: "{{workflow.parameters.dockerfile}}"
              - name: image
                value: "{{workflow.parameters.image}}"
    # build-image 作为一个通用的 template，不应该直接去引用 workflow.xxx 中的 parameters/artifacts
    # 这样做的好处是复用性强，这个 template 可以被其他 workflow 引用。
    - name: build-image
      inputs:
        artifacts:
          - name: git-repo
        parameters:
          - name: context-path
          - name: dockerfile
          - name: image
      container:
        image: moby/buildkit:v0.7.2-rootless
        # 挂载 docker credential
        volumeMounts:
          - name: docker-config
            mountPath: /.docker
          - name: home-cache
            mountPath: /home
        # 以 context 为工作目录
        workingDir: /work/{{inputs.parameters.context-path}}
        command:
          - buildctl-daemonless.sh
        args:
          - build
          - --frontend
          - dockerfile.v0
          - --local
          - context=.
          - --local
          - dockerfile={{inputs.parameters.dockerfile}}
          - --output
          - type=image,name={{inputs.parameters.image}},push=true

