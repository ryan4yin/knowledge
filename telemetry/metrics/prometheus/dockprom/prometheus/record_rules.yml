# 记录规则(recrod rules)，可用于预先计算 PromQL 并缓存可重用的结果，提升计算效率。
# 这对 Grafana 的作用很大，Grafana 面板会经常刷新页面，重复计算同样的 PromQL
groups:
- name: node_rules
  rules:
  - record: instance:node_cpu:avg_rate5m
    expr: 100 - avg (irate(node_cpu_seconds_total{mode="idle"}[5m])) by (instance) * 100
  - record: instance:node_cpus:count
    expr: count by (instance)(node_cpu_seconds_total{mode="idle"})
  - record: instance:node_cpu_saturation_load1
    expr: node_load1 > on (instance) 2 * count by (instance)(node_cpu_seconds_total{mode="idle"})
  - record: instance:node_memory_usage:percentage
    expr: (node_memory_MemTotal_bytes - (node_memory_MemFree + node_memory_Cached_bytes + node_memory_Buffers_bytes)) / node_memory_MemTotal_bytes * 100
  - record: instance:node_memory_swap_io_bytes:sum_rate
    expr: 1024 * sum by (instance) (
                  (rate(node_vmstat_pgpgin[1m])
                  + rate(node_vmstat_pgpgout[1m]))
          )
  - record: instance:root:node_filesystem_usage:percentage
    expr: (node_filesystem_size_bytes{mountpoint="/"} - node_filesystem_free_bytes{mountpoint="/"}) / node_filesystem_size_bytes{mountpoint="/"} * 100



  - record: instance:node_num_cpu:sum
    expr: |
      count without (cpu) (
        count without (mode) (
          node_cpu_seconds_total{job="node-exporter-out"}
        )
      )
  - record: instance:node_cpu_utilisation:rate1m
    expr: |
      1 - avg without (cpu, mode) (
        rate(node_cpu_seconds_total{job="node-exporter-out", mode="idle"}[1m])
      )
      